from _typeshed import Incomplete
from django.db.models.expressions import Expression

class CTEColumns:
    def __init__(self, cte) -> None: ...
    def __getattr__(self, name): ...

class CTEColumn(Expression):
    table_alias: Incomplete
    name: Incomplete
    def __init__(self, cte, name, output_field: Incomplete | None = ...) -> None: ...
    @property
    def target(self): ...
    @property
    def output_field(self): ...
    def as_sql(self, compiler, connection): ...
    def relabeled_clone(self, relabels): ...

class CTEColumnRef(Expression):
    name: Incomplete
    cte_name: Incomplete
    output_field: Incomplete
    def __init__(self, name, cte_name, output_field) -> None: ...
    def resolve_expression(self, query: Incomplete | None = ..., allow_joins: bool = ..., reuse: Incomplete | None = ..., summarize: bool = ..., for_save: bool = ...): ...
    def relabeled_clone(self, change_map): ...
    def as_sql(self, compiler, connection): ...
