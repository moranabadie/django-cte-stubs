from .expressions import CTESubqueryResolver as CTESubqueryResolver
from _typeshed import Incomplete
from django.db.models.sql import DeleteQuery, Query, UpdateQuery
from django.db.models.sql.compiler import SQLCompiler, SQLDeleteCompiler, SQLUpdateCompiler

class CTEQuery(Query):
    def __init__(self, *args, **kwargs) -> None: ...
    def combine(self, other, connector): ...
    def get_compiler(self, using: Incomplete | None = ..., connection: Incomplete | None = ..., *args, **kwargs): ...
    def add_annotation(self, annotation, *args, **kw) -> None: ...
    def clone(self, klass: Incomplete | None = ..., *args, **kwargs): ...
    def chain(self, klass: Incomplete | None = ...): ...

class CTECompiler:
    @classmethod
    def generate_sql(cls, connection, query, as_sql): ...
    @classmethod
    def get_cte_query_template(cls, cte): ...

class CTEUpdateQuery(UpdateQuery, CTEQuery): ...
class CTEDeleteQuery(DeleteQuery, CTEQuery): ...

QUERY_TYPES: Incomplete

class CTEQueryCompiler(SQLCompiler):
    def as_sql(self, *args, **kwargs): ...

class CTEUpdateQueryCompiler(SQLUpdateCompiler):
    def as_sql(self, *args, **kwargs): ...

class CTEDeleteQueryCompiler(SQLDeleteCompiler):
    def as_sql(self, *args, **kwargs): ...

COMPILER_TYPES: Incomplete
